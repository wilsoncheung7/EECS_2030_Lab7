import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/*
 * Requirement:
 * You are required to implement all methods recursively.
 * You receive a zero if there is any occurrence of a loop (e.g., for, while).  
 */
public class RecursiveMethods {
	/**
	 * Return an array storing the first n numbers in a Fibonacci sequence. The
	 * Fibonacci starts with the first two numbers being 1 and 1, then starting from
	 * the 3rd number, it is the sum of the previous two numbers. You can assume
	 * that n is positive. e.g., fibArray(5) returns an array {1, 1, 2, 3, 5}.
	 * 
	 * @param n
	 *            the first n Fibonacci numbers
	 * @return an array representing the first n Fibonacci numbers
	 * 
	 *         You are forbidden to use the fibList method below to solve this
	 *         problem.
	 * 
	 *         Requirement: You are required to implement all methods recursively.
	 *         You receive a zero if there is any occurrence of a loop (e.g., for,
	 *         while).
	 */
	public int[] fibArray(int n) {
		if (n == 1) {
			int[] seq = { 1 };
			return seq;
		}
		if (n == 2) {
			int[] seq = { 1, 1 };
			return seq;
		} else {
			int[] seq = new int[n];
			seq[0] = 1;
			seq[1] = 1;
			fibArrayHelper(2, seq); // fibArrayHelper recursively fills in the rest of seq
			return seq;

		}
	}

	private void fibArrayHelper(int i, int[] seq) {
		// recursively fills in seq starting at index i
		if (i < seq.length) {
			seq[i] = seq[i - 1] + seq[i - 2];
			fibArrayHelper(i + 1, seq);
		}
	}

	/**
	 * Return a list storing the first n numbers in a Fibonacci sequence. The
	 * Fibonacci starts with the first two numbers being 1 and 1, then starting from
	 * the 3rd number, it is the sum of the previous two numbers. You can assume
	 * that n is positive. e.g., fibList(5) returns a list {1, 1, 2, 3, 5}.
	 * 
	 * @param n
	 *            the first n Fibonacci numbers
	 * @return a list representing the first n Fibonacci numbers
	 * 
	 *         You are forbidden to use the fibArray method above to solve this
	 *         problem.
	 * 
	 *         Requirement: You are required to implement all methods recursively.
	 *         You receive a zero if there is any occurrence of a loop (e.g., for,
	 *         while).
	 */
	public List<Integer> fibList(int n) {
		/* Your Task. */
		if (n == 1) {
			List<Integer> fib = new ArrayList<>();
			fib.add(1);
			return fib;
		}
		if (n == 2) {
			List<Integer> fib = new ArrayList<>();
			fib.add(1);
			fib.add(1);
			return fib;
		}
		List<Integer> fib = new ArrayList<>();
		fib.add(0, 1);
		fib.add(1, 1);
		fibListHelper(2, fib, n);
		return fib;
	}

	private void fibListHelper(int i, List<Integer> fib, int n) {

		if (i < n) {
			fib.add(fib.get(i - 1) + fib.get(i - 2));
			fibListHelper(i + 1, fib, n);
		}

	}

	/**
	 * Return whether or not an array represents the first n numbers in a Fibonacci
	 * sequence. The Fibonacci starts with the first two numbers being 1 and 1, then
	 * starting from the 3rd number, it is the sum of the previous two numbers. The
	 * array may or may not be empty. e.g., isFibArray({1, 2}) returns false and
	 * isFibArray({1, 1, 2, 3, 5, 8}) returns true.
	 * 
	 * @param a
	 *            an array
	 * @return true if input array a (of length n) represents the first n Fibonacci
	 *         numbers; false otherwise.
	 * 
	 *         You are forbidden to use the isFibList method below to solve this
	 *         problem.
	 * 
	 *         Requirement: You are required to implement all methods recursively.
	 *         You receive a zero if there is any occurrence of a loop (e.g., for,
	 *         while).
	 */
	public boolean isFibArray(int[] a) {
		/* Your Task. */
		if (a.length == 0) {
			return false;
		}
		return Arrays.equals(a, fibArray(a.length));
	}

	/**
	 * Return whether or not a list represents the first n numbers in a Fibonacci
	 * sequence. The Fibonacci starts with the first two numbers being 1 and 1, then
	 * starting from the 3rd number, it is the sum of the previous two numbers. The
	 * array may or may not be empty. e.g., isFibList({1, 2}) returns false and
	 * isFibList({1, 1, 2, 3, 5, 8}) returns true.
	 * 
	 * @param a
	 *            an array
	 * @return true if input list a (of length n) represents the first n Fibonacci
	 *         numbers; false otherwise.
	 * 
	 *         You are forbidden to use the isFibArray method above to solve this
	 *         problem.
	 * 
	 *         Requirement: You are required to implement all methods recursively.
	 *         You receive a zero if there is any occurrence of a loop (e.g., for,
	 *         while).
	 */
	public boolean isFibList(List<Integer> list) {
		/* Your Task. */
		if (list.size() == 0) {
			return false;
		}
		return list.equals(fibList(list.size()));
	}

	/**
	 * Given a sorted input array a, return a sorted array of size a.length + 1,
	 * consisting of all elements of array a and integer i.
	 * 
	 * @param a
	 *            an array that is sorted in a non-descending order
	 * @param i
	 *            an integer
	 * @return a sorted array of size a.length + 1, consisting of all elements of
	 *         array a and integer i. e.g., insertIntoSortedArray({1, 2, 4, 5}, 3)
	 *         returns a sorted array {1, 2, 3, 4, 5}.
	 * 
	 *         You are forbidden to use the insertIntoSortedList method below to
	 *         solve this problem.
	 * 
	 *         Requirement: You are required to implement all methods recursively.
	 *         You receive a zero if there is any occurrence of a loop (e.g., for,
	 *         while).
	 */
	public int[] insertIntoSortedArray(int[] a, int i) {
		/* Your Task. */
		int[] b = new int[a.length + 1];
		boolean inserted = false;
		if (a.length == 0) {
			b[0] = i;
		} else {
			sortedHelper(a, b, i, 0, inserted);
		}
		return b;
	}

	private void sortedHelper(int[] a, int[] b, int i, int j, boolean inserted) {
		if (j == a.length) {
			if (inserted) {
				b[j] = a[j - 1];
			} else {
				b[j] = i;
			}
		} else {
			if (i >= a[j]) {
				if (inserted) {
					b[j] = a[j - 1];
					sortedHelper(a, b, i, j + 1, inserted);
				} else {
					b[j] = a[j];

					sortedHelper(a, b, i, j + 1, inserted);
				}
			} else if (i < a[j]) {
				if (inserted) {
					b[j] = a[j - 1];
					sortedHelper(a, b, i, j + 1, inserted);
				} else {
					b[j] = i;
					inserted = true;
					sortedHelper(a, b, i, j + 1, inserted);
				}
			}
		}

	}

	/**
	 * Given a sorted input list, return a sorted list of size list.size() + 1,
	 * consisting of all elements of the input list and integer i.
	 * 
	 * @param list
	 *            a list that is sorted in a non-descending order
	 * @param i
	 *            an integer
	 * @return a sorted list of size list.size() + 1, consisting of all elements of
	 *         the input list and integer i. e.g., insertIntoSortedList({1, 2, 4,
	 *         5}, 3) returns a sorted list {1, 2, 3, 4, 5}.
	 * 
	 *         You are forbidden to use the insertIntoSortedArray method above to
	 *         solve this problem.
	 * 
	 *         Requirement: You are required to implement all methods recursively.
	 *         You receive a zero if there is any occurrence of a loop (e.g., for,
	 *         while).
	 */
	public List<Integer> insertIntoSortedList(List<Integer> list, int i) {
		/* Your Task. */
		List<Integer> sorted = new ArrayList<>();
		boolean inserted = false;
		if (list.size() == 0) {
			sorted.add(i);
		} else {
			sortedHelper2(list, sorted, i, 0, inserted);
		}
		return sorted;
	}

	private void sortedHelper2(List<Integer> list, List<Integer> sorted, int i, int j, boolean inserted) {
		if (j == list.size()) {
			if (inserted) {
				sorted.add(j, list.get(j - 1));

			} else {
				sorted.add(j, i);
			}

		} else {
			if (i >= list.get(j)) {
				if (inserted) {
					sorted.add(j, list.get(j - 1));
					sortedHelper2(list, sorted, i, j + 1, inserted);
				} else {
					sorted.add(j, list.get(j));

					sortedHelper2(list, sorted, i, j + 1, inserted);
				}
			} else if (i < list.get(j)) {
				if (inserted) {
					sorted.add(j, list.get(j - 1));
					sortedHelper2(list, sorted, i, j + 1, inserted);
				} else {
					sorted.add(j, i);
					inserted = true;
					sortedHelper2(list, sorted, i, j + 1, inserted);
				}
			}
		}

	}

	/**
	 * Given two sorted arrays left and right, return a sorted array of size
	 * left.length + right.length, consisting of all elements of arrays left and
	 * right.
	 *
	 * @param left
	 *            a sorted array
	 * @param right
	 *            a sorted array
	 * @return a sorted array of size left.length + right.length, consisting of all
	 *         elements of arrays left and right. e.g., mergeSortedArrays({1, 3, 5,
	 *         7}, {2, 4, 6, 8}) returns a sorted array {1, 2, 3, 4, 5, 6, 7, 8}.
	 *
	 *         You are forbidden to use the mergeSortedLists method below to solve
	 *         this problem.
	 *
	 *         Requirement: You are required to implement all methods recursively.
	 *         You receive a zero if there is any occurrence of a loop (e.g., for,
	 *         while).
	 */
	public int[] mergeSortedArrays(int[] left, int[] right) {
		/* Your Task. */
		int[] result = new int[left.length + right.length];
		if (left.length == 0)
			return right;
		else if (right.length == 0)
			return left;
		else if (result.length == 0)
			return result;
		mergeHelper(left, right, result, 0, 0, 0);
		return result;
	}

	private void mergeHelper(int[] left, int[] right, int[] result, int m, int n, int k) {

		if (k == result.length - 1) {
			if (m == left.length)
				result[k] = right[n];
			else if (n == right.length)
				result[k] = left[m];
			else {
				if (left[m] > right[n])
					result[k] = right[n];
				else if (left[m] < right[n])
					result[k] = left[m];
				else {
					result[k] = left[m];
					result[k + 1] = right[n];
				}
			}
		} else {
			if (m == left.length) {
				result[k] = right[n];
				mergeHelper(left, right, result, m, n + 1, k + 1);
			} else if (n == right.length) {
				result[k] = left[m];
				mergeHelper(left, right, result, m + 1, n, k + 1);
			} else {
				if (left[m] > right[n]) {
					result[k] = right[n];
					mergeHelper(left, right, result, m, n + 1, k + 1);
				} else if (left[m] < right[n]) {
					result[k] = left[m];
					mergeHelper(left, right, result, m + 1, n, k + 1);
				} else {
					result[k] = left[n];
					result[k + 1] = right[n];
					mergeHelper(left, right, result, m + 1, n + 1, k + 1);
				}
			}
		}
	}

	/**
	 * Given two sorted lists left and right, return a sorted list of size
	 * left.size() + right.size(), consisting of all elements of lists left and
	 * right.
	 * 
	 * @param left
	 *            a sorted list
	 * @param right
	 *            a sorted list
	 * @return a sorted list of size left.size() + right.size(), consisting of all
	 *         elements of lists left and right. e.g., mergeSortedLists({1, 3, 5,
	 *         7}, {2, 4, 6, 8}) returns a sorted list {1, 2, 3, 4, 5, 6, 7, 8}.
	 * 
	 *         You are forbidden to use the mergeSortedArrays method above to solve
	 *         this problem.
	 * 
	 *         Requirement: You are required to implement all methods recursively.
	 *         You receive a zero if there is any occurrence of a loop (e.g., for,
	 *         while).
	 */
	public List<Integer> mergeSortedLists(List<Integer> left, List<Integer> right) {
		List<Integer> result = new ArrayList<>();
		int total=left.size()+right.size();
		if (left.size() == 0)
			return right;
		else if (right.size() == 0)
			return left;
		else if (total == 0)
			return result;
		mergeHelper2(left, right, result, 0, 0, 0,total);
		return result;
	}

	private void mergeHelper2(List<Integer> left, List<Integer> right, List<Integer> result, int m, int n, int k,int total) {
		if (k == total-1) {
			if (m == left.size())
				result.add(k,right.get(n));
			else if (n == right.size())
				result.add(k,left.get(m));
			else {
				if (left.get(m) > right.get(n))
					result.add(k,right.get(n));
				else if (left.get(m) < right.get(n))
					result.add(k,left.get(m));
				else {
					result.add(k,left.get(m));
					result.add(k+1,right.get(n));
				}
			}
		} else {
			if (m == left.size()) {
				result.add(k,right.get(n));
				mergeHelper2(left, right, result, m, n + 1, k + 1,total);
			}
			if (n == right.size()) {
				result.add(k,left.get(m));
				mergeHelper2(left, right, result, m + 1, n, k + 1,total);
			} else {
				if (left.get(m) > right.get(n)) {
					result.add(k,right.get(n));
					mergeHelper2(left, right, result, m, n + 1, k + 1,total);
				} else if (left.get(m) < right.get(n)) {
					result.add(k,left.get(m));
					mergeHelper2(left, right, result, m + 1, n, k + 1,total);
				} else {
					result.add(k,left.get(m));
					result.add(k+1,right.get(n));
					mergeHelper2(left, right, result, m + 1, n + 1, k + 1,total);
				}
			}
		}
	}
}
